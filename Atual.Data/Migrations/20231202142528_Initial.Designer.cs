// <auto-generated />
using System;
using Atual.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Atual.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231202142528_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AtualAPI.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Bairro");

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("CEP");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("CompanyId");

                    b.Property<string>("Complemento")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Complemento");

                    b.Property<Guid>("ElementId")
                        .HasColumnType("char(36)")
                        .HasColumnName("ElementId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Email");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Endereco");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Estado");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Pais");

                    b.Property<string>("Phone1")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Phone1");

                    b.Property<string>("Phone2")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Phone2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "IX_Address_Id")
                        .IsUnique();

                    b.ToTable("enderecos", (string)null);
                });

            modelBuilder.Entity("AtualAPI.Models.Ambiente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("CompanyId");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreationDate");

                    b.Property<DateTime>("DataInicioPrev")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataInicioPrev");

                    b.Property<DateTime>("DataInicioReal")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataInicioReal");

                    b.Property<DateTime>("DataTerminoPrev")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataTerminoPrev");

                    b.Property<DateTime>("DataTerminoReal")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataTerminoReal");

                    b.Property<DateTime>("DataVistoria")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataVistoria");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Descricao");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Details");

                    b.Property<Guid>("MontagemId")
                        .HasColumnType("char(36)")
                        .HasColumnName("MontagemId");

                    b.Property<int>("QtdItems")
                        .HasColumnType("int")
                        .HasColumnName("QtdItems");

                    b.Property<string>("RelatorioVistoria")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("RelatorioVistoria");

                    b.Property<string>("URLImgVistoria")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("URLImgVistoria");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex(new[] { "Id" }, "IX_Ambiente_Id")
                        .IsUnique();

                    b.ToTable("ambientes", (string)null);
                });

            modelBuilder.Entity("AtualAPI.Models.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("CompanyId");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creation_date");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Details");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("LastName");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex(new[] { "Id" }, "IX_Client_Id")
                        .IsUnique();

                    b.ToTable("clientes", (string)null);
                });

            modelBuilder.Entity("AtualAPI.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BussinesPlan")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValue("")
                        .HasColumnName("bssines_plan");

                    b.Property<string>("BussinesPlanStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValue("")
                        .HasColumnName("bussines_planStatus");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creation_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("owner_Id");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.ToTable("companies", (string)null);
                });

            modelBuilder.Entity("AtualAPI.Models.Contrato", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("char(36)")
                        .HasColumnName("ClienteId");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("CompanyId");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creation_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Description");

                    b.Property<string>("URL_Contrato")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("URL_Contrato");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex(new[] { "Id" }, "IX_Contrato_Id")
                        .IsUnique();

                    b.ToTable("contratos", (string)null);
                });

            modelBuilder.Entity("AtualAPI.Models.Funcionario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Cargo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Cargo");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("CompanyId");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creation_date");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("LastName");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex(new[] { "Id" }, "IX_Client_Id")
                        .IsUnique()
                        .HasDatabaseName("IX_Client_Id1");

                    b.ToTable("funcionarios", (string)null);
                });

            modelBuilder.Entity("AtualAPI.Models.Montadores", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("CompanyId");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creation_date");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Details");

                    b.Property<Guid>("FuncionarioId")
                        .HasColumnType("char(36)")
                        .HasColumnName("FuncionarioId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex(new[] { "Id" }, "IX_Client_Id")
                        .IsUnique()
                        .HasDatabaseName("IX_Client_Id2");

                    b.ToTable("montadores", (string)null);
                });

            modelBuilder.Entity("AtualAPI.Models.Montagem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("CompanyId");

                    b.Property<Guid>("ContratoId")
                        .HasColumnType("char(36)")
                        .HasColumnName("ContratoId");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreationDate");

                    b.Property<DateTime>("DataInicioPrev")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataInicioPrev");

                    b.Property<DateTime>("DataInicioReal")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataInicioReal");

                    b.Property<DateTime>("DataTerminoPrev")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataTerminoPrev");

                    b.Property<DateTime>("DataTerminoReal")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataTerminoReal");

                    b.Property<DateTime>("DataVistoria")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataVistoria");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Details");

                    b.Property<string>("RelatorioVistoria")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("RelatorioVistoria");

                    b.Property<Guid>("TimeMontagemId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TimeMontagemId");

                    b.Property<string>("URLImgVistoria")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("URLImgVistoria");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex(new[] { "Id" }, "IX_Montagem_Id")
                        .IsUnique();

                    b.ToTable("montagems", (string)null);
                });

            modelBuilder.Entity("AtualAPI.Models.ReportIncidente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AmbienteId")
                        .HasColumnType("char(36)")
                        .HasColumnName("AmbienteId");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("CompanyId");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreationDate");

                    b.Property<DateTime>("DataOcorrencia")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataOcorrencia");

                    b.Property<DateTime>("DataSolucao")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataSolucao");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Descricao");

                    b.Property<Guid>("MontagemId")
                        .HasColumnType("char(36)")
                        .HasColumnName("MontagemId");

                    b.Property<string>("RelatorioOcorrenciaSolucao")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("RelatorioOcorrenciaSolucao");

                    b.Property<string>("RelatorioSolucao")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("RelatorioSolucao");

                    b.Property<string>("URLImgOcorrencia")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("URLImgOcorrencia");

                    b.Property<string>("URLImgSolucao")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("URLImgSolucao");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex(new[] { "Id" }, "IX_Incidentes_Id")
                        .IsUnique();

                    b.ToTable("incidentes", (string)null);
                });

            modelBuilder.Entity("AtualAPI.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creation_date");

                    b.Property<int>("LevelCliente")
                        .HasColumnType("int")
                        .HasColumnName("LevelCliente");

                    b.Property<int>("LevelContrato")
                        .HasColumnType("int")
                        .HasColumnName("LevelContrato");

                    b.Property<int>("LevelFuncionarios")
                        .HasColumnType("int")
                        .HasColumnName("LevelFuncionarios");

                    b.Property<int>("LevelMontagens")
                        .HasColumnType("int")
                        .HasColumnName("LevelMontagens");

                    b.Property<int>("LevelRoles")
                        .HasColumnType("int")
                        .HasColumnName("level_roles");

                    b.Property<int>("LevelUsers")
                        .HasColumnType("int")
                        .HasColumnName("level_users");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("AtualAPI.Models.TimeMontadores", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("CompanyId");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creation_date");

                    b.Property<Guid>("FuncionarioId")
                        .HasColumnType("char(36)")
                        .HasColumnName("FuncionarioId");

                    b.Property<int>("LevelMontador")
                        .HasColumnType("int")
                        .HasColumnName("LevelMontador");

                    b.Property<string>("NameTime")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("NameTime");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex(new[] { "Id" }, "IX_Client_Id")
                        .IsUnique()
                        .HasDatabaseName("IX_Client_Id3");

                    b.ToTable("time_montadores", (string)null);
                });

            modelBuilder.Entity("AtualAPI.Models.UserModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CompanyId")
                        .IsRequired()
                        .HasColumnType("char(36)")
                        .HasColumnName("CompanyId");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creation_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext")
                        .HasColumnName("last_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex(new[] { "Email" }, "IX_User_Email")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("CompanyRole", b =>
                {
                    b.Property<Guid>("CompaniesId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RolesId")
                        .HasColumnType("char(36)");

                    b.HasKey("CompaniesId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("CompanyRole");
                });

            modelBuilder.Entity("RoleUserModel", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("char(36)");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUserModel");
                });

            modelBuilder.Entity("AtualAPI.Models.Ambiente", b =>
                {
                    b.HasOne("AtualAPI.Models.Company", null)
                        .WithMany("Ambientes")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AtualAPI.Models.Cliente", b =>
                {
                    b.HasOne("AtualAPI.Models.Company", null)
                        .WithMany("Clientes")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AtualAPI.Models.Contrato", b =>
                {
                    b.HasOne("AtualAPI.Models.Company", null)
                        .WithMany("Contratos")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AtualAPI.Models.Funcionario", b =>
                {
                    b.HasOne("AtualAPI.Models.Company", null)
                        .WithMany("Funcionarios")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AtualAPI.Models.Montadores", b =>
                {
                    b.HasOne("AtualAPI.Models.Company", null)
                        .WithMany("Montadores")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AtualAPI.Models.Montagem", b =>
                {
                    b.HasOne("AtualAPI.Models.Company", null)
                        .WithMany("Montagems")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AtualAPI.Models.ReportIncidente", b =>
                {
                    b.HasOne("AtualAPI.Models.Company", null)
                        .WithMany("ReportIncidentes")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AtualAPI.Models.TimeMontadores", b =>
                {
                    b.HasOne("AtualAPI.Models.Company", null)
                        .WithMany("TimesMontagem")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AtualAPI.Models.UserModel", b =>
                {
                    b.HasOne("AtualAPI.Models.Company", null)
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompanyRole", b =>
                {
                    b.HasOne("AtualAPI.Models.Company", null)
                        .WithMany()
                        .HasForeignKey("CompaniesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtualAPI.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUserModel", b =>
                {
                    b.HasOne("AtualAPI.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtualAPI.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AtualAPI.Models.Company", b =>
                {
                    b.Navigation("Ambientes");

                    b.Navigation("Clientes");

                    b.Navigation("Contratos");

                    b.Navigation("Funcionarios");

                    b.Navigation("Montadores");

                    b.Navigation("Montagems");

                    b.Navigation("ReportIncidentes");

                    b.Navigation("TimesMontagem");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
