// <auto-generated />
using System;
using AtualAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AtualAPI.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231125035357_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CompanyRole", b =>
                {
                    b.Property<Guid>("CompaniesId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RolesId")
                        .HasColumnType("char(36)");

                    b.HasKey("CompaniesId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("CompanyRole");
                });

            modelBuilder.Entity("AtualAPI.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BussinesPlan")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValue("")
                        .HasColumnName("bssines_plan");

                    b.Property<string>("BussinesPlanStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValue("")
                        .HasColumnName("bussines_planStatus");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creation_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("owner_Id");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.ToTable("companies", (string)null);
                });

            modelBuilder.Entity("AtualAPI.Models.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("AtualAPI.Models.Operation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ActualTask")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("Exception")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastSucessTask")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Observations")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("ProcessId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ReferenceDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Start")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Station")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProcessId");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("AtualAPI.Models.Process", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Briefing")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Dependencies")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Documentation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RPA")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ReferenceDate")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Risc")
                        .HasColumnType("int");

                    b.Property<string>("SLA_Company")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SLA_Department")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SLA_Group")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Sporadic")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("TimeEnd")
                        .HasColumnType("int");

                    b.Property<int>("TimeStart")
                        .HasColumnType("int");

                    b.Property<int>("TypeStart")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("GroupId");

                    b.ToTable("Processes");
                });

            modelBuilder.Entity("AtualAPI.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creation_date");

                    b.Property<int>("LevelAdmin")
                        .HasColumnType("int")
                        .HasColumnName("level_admin");

                    b.Property<int>("LevelDashBoard")
                        .HasColumnType("int")
                        .HasColumnName("level_dash_board");

                    b.Property<int>("LevelOperations")
                        .HasColumnType("int")
                        .HasColumnName("level_operations");

                    b.Property<int>("LevelProcess")
                        .HasColumnType("int")
                        .HasColumnName("level_process");

                    b.Property<int>("LevelRoles")
                        .HasColumnType("int")
                        .HasColumnName("level_roles");

                    b.Property<int>("LevelStations")
                        .HasColumnType("int")
                        .HasColumnName("level_stations");

                    b.Property<int>("LevelUsers")
                        .HasColumnType("int")
                        .HasColumnName("level_users");

                    b.Property<int>("LevelWorkFlows")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.Property<bool>("UseApi")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("AtualAPI.Models.RoleUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("companyId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("roleId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("userId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("companyId");

                    b.HasIndex("roleId");

                    b.HasIndex("userId");

                    b.ToTable("RoleUsers");
                });

            modelBuilder.Entity("AtualAPI.Models.TriggerDateTime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("CompanyId");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creation_date");

                    b.Property<string>("DateExceptions")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("DateExceptions");

                    b.Property<string>("DateExecutions")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("DateExecutions");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("Description");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enabled");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Title");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex(new[] { "Title" }, "IX_Trigger_Title")
                        .IsUnique();

                    b.ToTable("triggers", (string)null);
                });

            modelBuilder.Entity("AtualAPI.Models.UserModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creation_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext")
                        .HasColumnName("last_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex(new[] { "Email" }, "IX_User_Email")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("AtualAPI.Models.Workflow.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Center")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creation_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FileScript")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<float>("Height")
                        .HasColumnType("float");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RowsJs")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<byte[]>("Script")
                        .HasColumnType("blob")
                        .HasColumnName("Script");

                    b.Property<string>("SubTitle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Title");

                    b.Property<int>("TypeActivity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.Property<float>("Width")
                        .HasColumnType("float");

                    b.Property<Guid?>("WorkFlowId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("WorkFlowId");

                    b.HasIndex(new[] { "Title" }, "IX_Activity_Title")
                        .IsUnique();

                    b.ToTable("activities", (string)null);
                });

            modelBuilder.Entity("AtualAPI.Models.Workflow.ActivityUsers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("char(36)")
                        .HasColumnName("ActivityId");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creation_date");

                    b.Property<int>("LevelAccess")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.ToTable("activities_users", (string)null);
                });

            modelBuilder.Entity("AtualAPI.Models.Workflow.ActivityWorkflow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("char(36)")
                        .HasColumnName("activity_id");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creation_date");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("enabled");

                    b.Property<Guid>("WorkflowId")
                        .HasColumnType("char(36)")
                        .HasColumnName("workflow_id");

                    b.HasKey("Id");

                    b.ToTable("activity_workflow", (string)null);
                });

            modelBuilder.Entity("AtualAPI.Models.Workflow.ArrowDiagram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("ArrowType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Destino")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DestinoGuid")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastPoint")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Origem")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OrigemGuid")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Points")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("StartPoint")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("WorkFlowId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("WorkFlowId");

                    b.ToTable("ArrowDiagrams");
                });

            modelBuilder.Entity("AtualAPI.Models.Workflow.Decision", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("GradientColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<float>("Height")
                        .HasColumnType("float");

                    b.Property<string>("IFExpression")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<float>("Width")
                        .HasColumnType("float");

                    b.Property<Guid>("WorkFlowId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("WorkFlowId");

                    b.ToTable("decisions");
                });

            modelBuilder.Entity("AtualAPI.Models.Workflow.FileScript", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<byte[]>("Script")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("file_script");
                });

            modelBuilder.Entity("AtualAPI.Models.Workflow.WorkFlow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creation_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex(new[] { "Name" }, "IX_Workflow_Name")
                        .IsUnique();

                    b.ToTable("workflows", (string)null);
                });

            modelBuilder.Entity("AtualAPI.Models.Workflow.WorkFlowTrigger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creation_date");

                    b.Property<Guid>("TriggerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TriggerId");

                    b.Property<Guid>("WorkflowId")
                        .HasColumnType("char(36)")
                        .HasColumnName("WorkflowId");

                    b.HasKey("Id");

                    b.ToTable("workflow_triggers", (string)null);
                });

            modelBuilder.Entity("AtualAPI.Models.Workflow.WorkFlowUsers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("CompanyId");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creation_date");

                    b.Property<int>("LevelAccess")
                        .HasColumnType("int")
                        .HasColumnName("LevelAccess");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("UserId");

                    b.Property<Guid>("WorkflowId")
                        .HasColumnType("char(36)")
                        .HasColumnName("WorkflowId");

                    b.HasKey("Id");

                    b.ToTable("workflow_users", (string)null);
                });

            modelBuilder.Entity("RoleUserModel", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("char(36)");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUserModel");
                });

            modelBuilder.Entity("CompanyRole", b =>
                {
                    b.HasOne("AtualAPI.Models.Company", null)
                        .WithMany()
                        .HasForeignKey("CompaniesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtualAPI.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AtualAPI.Models.Group", b =>
                {
                    b.HasOne("AtualAPI.Models.Company", null)
                        .WithMany("Groups")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AtualAPI.Models.Operation", b =>
                {
                    b.HasOne("AtualAPI.Models.Company", "Company")
                        .WithMany("Operations")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtualAPI.Models.Process", "Process")
                        .WithMany("Operations")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Process");
                });

            modelBuilder.Entity("AtualAPI.Models.Process", b =>
                {
                    b.HasOne("AtualAPI.Models.Company", "Company")
                        .WithMany("Processes")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtualAPI.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("AtualAPI.Models.RoleUser", b =>
                {
                    b.HasOne("AtualAPI.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("companyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtualAPI.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("roleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtualAPI.Models.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AtualAPI.Models.TriggerDateTime", b =>
                {
                    b.HasOne("AtualAPI.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("AtualAPI.Models.UserModel", b =>
                {
                    b.HasOne("AtualAPI.Models.Company", null)
                        .WithMany("Users")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("AtualAPI.Models.Workflow.Activity", b =>
                {
                    b.HasOne("AtualAPI.Models.Workflow.WorkFlow", null)
                        .WithMany("Activities")
                        .HasForeignKey("WorkFlowId");
                });

            modelBuilder.Entity("AtualAPI.Models.Workflow.ArrowDiagram", b =>
                {
                    b.HasOne("AtualAPI.Models.Workflow.WorkFlow", "WorkFlow")
                        .WithMany("ArrowDiagrams")
                        .HasForeignKey("WorkFlowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkFlow");
                });

            modelBuilder.Entity("AtualAPI.Models.Workflow.Decision", b =>
                {
                    b.HasOne("AtualAPI.Models.Workflow.WorkFlow", "WorkFlow")
                        .WithMany("Decisions")
                        .HasForeignKey("WorkFlowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkFlow");
                });

            modelBuilder.Entity("AtualAPI.Models.Workflow.FileScript", b =>
                {
                    b.HasOne("AtualAPI.Models.Workflow.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("AtualAPI.Models.Workflow.WorkFlow", b =>
                {
                    b.HasOne("AtualAPI.Models.Company", null)
                        .WithMany("WorkFlows")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUserModel", b =>
                {
                    b.HasOne("AtualAPI.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtualAPI.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AtualAPI.Models.Company", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Operations");

                    b.Navigation("Processes");

                    b.Navigation("Users");

                    b.Navigation("WorkFlows");
                });

            modelBuilder.Entity("AtualAPI.Models.Process", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("AtualAPI.Models.Workflow.WorkFlow", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("ArrowDiagrams");

                    b.Navigation("Decisions");
                });
#pragma warning restore 612, 618
        }
    }
}
